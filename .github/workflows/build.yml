name: Build
on:
  push:
    branches:
      - master # or the name of your main branch
      - main

jobs:
  postgres-job:
    # containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # service containers to run with `postgres-job`
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: dl_ecommerce
          # required
          POSTGRES_PASSWORD: okpanou2
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: postgres
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install PostgreSQL client
        run: |
          apt-get update
          apt-get install --yes postgresql-client

      # queries database with postgres client
      - name: Query database
        run: psql -h postgres -d dl_ecommerce -U postgres -c 'SELECT 1;'
        env:
          # postgress password is required; alternatively, you can run:
          # `PGPASSWORD=postgres_password psql ...`
          PGPASSWORD: okpanou2

      #build
      - name: Build Api
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=sonar


